
DAte:4/2/2025
React js :
--create a element by using js:
<h1>sai</h1>
Let a=document.createElement('h1');
a.innerHtml="I am ravi"
Document.body.appendChild(a)
Console.log(a)

To create a element by react js:
--react.createElment('h1')

Syntax:
React.createElement(type,prop)
--type = tag name(div,h1,p)
Props = className,id,onClick

--to display the element
--reactDOM.createRoot()
--reactDOM.render() --to display the element


INTRO TO JSX:
javascript xml is a syntax extension for js in react.js;
It allows us to write html code in react 
-it makes us easier to write html in react
JSX : JSX code gets compiled into JS
Babel : a tool converts translates into JS 
With JSX:
<div id ="app"></div>
    <script type ="text/babel">
        const element = <h1 className ="a"> Hello JSX! </h1>
        const root = ReactDOM.createRoot(document.getElementById('app'));
        root.render(element);
    </script>
Expressions in JSX:
With jsx you can write the expressions inside the { }
This allows us to embed javascript expressions directly ;
Date:5-2-2025
Date:6-2-2025
Create react app
npx node package excecutor
npx create-react-app- name //
cd name //change directory name
 Date:13/02/2025
 use content():
 props(properties) in react are used to pass data from parent component to chilld component

 prop drilling is the process data from parent component to deeply nested component through
  intermediate components by passing data as props at each level

Date: 14-02-2025
React reducer:A reducer is a function that helps to update(like score) based on action we take
React render : a render is a function that helps to update (like score , a list) based on action we take.

--1)Current state : the current state of the state.
--2)Action : 

Example : 
Action : add or remove an item
State : intial value (3 items) #3-apples

--Tracking apples  : 


import React ,{useReducer}from 'react';
//reducer function to track the number of the apples
function appleReducer(state=3,action){
  switch(action.type){
    case 'ADD_APPLE':
      return state + 1;
    case 'REMOVE_APPLE':
      return state - 1;
 default:
      return state;
  }
}
function App(){
  const [apple,dispatch]=useReducer(appleReducer,3);
  return(
    <div className='a'>
      <h1>Apple Counter</h1>
      <p>Number of Apples: {apple}</p>
      <button onClick={()=>dispatch({type:'ADD_APPLE'})}>Add Apple</button>
      <button onClick={()=>dispatch({type:'REMOVE_APPLE'})}>Remove Apple</button>
    </div>
  );
}
export default App;


Callback in react : 

--in react , a call back is function that is passed as an argument to another function
--call backs are often to communicate with different components.

Ex : a parent component passing as callback to a child

--parent component displays a message ; and child component has a button.
When the button is clicked , the child will use callback and tells the parent component to update the message.

useRef:
•	useState: changes the state, React will render the component and update the UI with the new element.
•	useRef: changing the value by using useRef does not re-render; stays the same even when the value is updated.
•	useRef: when you change the value stored in ref.current, it does not make the componentrender. This is useful when you need to store values or interact with DOM elements without extra re-renders.
•	Commonly used: 
o	Accessing a DOM element: like scrolling to screen 
o	Focusing the input
o	Storing values: It will keep track of values that don’t need to update the UI but need to remember the previous state.


Date:17-02-2025
How to use event changers:
import React, {useState, useEffect, useRef} from 'react';

function CounterWithPrev(){
    const [count, setCount] = useState(0);
    const prevCount = useRef();
    //create a ref to store the previous value

    useEffect(()=>{
        prevCount.current = count;
    }, [count])

    return(
        <div>
            <p>Current Counter: {count}</p>
            <p>prevCount: {prevCount.current}</p>

            <button onClick={()=>setCount(count+1)}>Increment</button>
        </div>
    )
}
export default CounterWithPrev;
